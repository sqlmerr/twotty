/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/eID2nzAgb3Z
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

"use client";

import Link from "next/link";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { useState } from "react";
import { getMe, updateUser } from "@/lib/api";
import { profile } from "console";
import useUserContext from "./user-context";
import { redirect } from "next/navigation";
import { Alert, AlertTitle } from "./ui/alert";

interface ProfileSettings {
  username?: string | null;
  avatar?: string | null;
  about?: string | null;
}

interface ErrorMessages {
  profile: string;
  security: string;
}

export function Settings() {
  const { user, setUser } = useUserContext();
  const [errorMessages, setErrorMessages] = useState({
    profile: "",
    security: "",
  } as ErrorMessages);
  const [profileSettings, setProfileSettings] = useState({} as ProfileSettings);
  const [password, setPassword] = useState("");

  async function updateProfile() {
    console.log(profileSettings);
    if (profileSettings.about == "") {
      profileSettings.about = null;
    }
    if (profileSettings.avatar == "") {
      profileSettings.avatar = null;
    }
    if (profileSettings.username == "") {
      profileSettings.username = null;
    }

    const response = await updateUser(profileSettings);
    if (response == false || typeof response === "string") {
      setErrorMessages({
        ...errorMessages,
        profile:
          typeof response === "string"
            ? response
            : "Something went wrong. Please check that the Avatar url is a valid image link",
      });
      return;
    }
    setProfileSettings({} as ProfileSettings);
    setErrorMessages({
      ...errorMessages,
      profile: "",
    });

    const newUser = await getMe();
    if (!newUser) {
      redirect("/login");
    }

    setUser(user);
  }

  return (
    <div className="flex flex-col min-h-screen">
      <header className="bg-white border-b px-4 md:px-6 h-16 flex items-center justify-between dark:bg-slate-950">
        <h1 className="text-xl font-semibold">Settings</h1>
      </header>
      <div className="flex-1 grid grid-cols-[240px_1fr] bg-slate-100 dark:bg-slate-800">
        <nav className="border-r px-4 py-6 space-y-4">
          <Link
            href="#"
            className="font-medium text-slate-900 dark:text-slate-50"
            prefetch={false}
          >
            Profile
          </Link>
          <Link
            href="#"
            className="font-medium text-slate-500 dark:text-slate-400"
            prefetch={false}
          >
            Security
          </Link>
        </nav>
        <div className="p-6 space-y-8">
          <Card>
            <CardHeader>
              <CardTitle>Profile</CardTitle>
              <CardDescription>
                Manage your personal information.
              </CardDescription>
            </CardHeader>
            <CardContent className="grid gap-6">
              <div className="grid gap-2">
                <Label htmlFor="name">Username</Label>
                <Input
                  id="name"
                  onChange={(e) =>
                    setProfileSettings({
                      ...profileSettings,
                      username: e.target.value,
                    })
                  }
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="avatarUrl">Avatar url</Label>
                <Input
                  id="avatarUrl"
                  onChange={(e) =>
                    setProfileSettings({
                      ...profileSettings,
                      avatar: e.target.value,
                    })
                  }
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="about">About</Label>
                <Textarea
                  id="about"
                  onChange={(e) =>
                    setProfileSettings({
                      ...profileSettings,
                      about: e.target.value,
                    })
                  }
                />
              </div>
            </CardContent>
            <CardFooter>
              <Button onClick={updateProfile}>Save Changes</Button>
              {errorMessages.profile && (
                <Alert>
                  <AlertTitle>{errorMessages.profile}</AlertTitle>
                </Alert>
              )}
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Security</CardTitle>
              <CardDescription>Manage your account security.</CardDescription>
            </CardHeader>
            <CardContent className="grid gap-6">
              <div className="grid gap-2">
                <Label htmlFor="password">Password</Label>
                <Input id="password" />
              </div>
              {/* <div className="flex items-center justify-between">
                <Label htmlFor="2fa">Two-factor authentication</Label>
                <Switch id="2fa" />
              </div> */}
            </CardContent>
            <CardFooter>
              <Button>Save Changes</Button>
              {errorMessages.security && (
                <Alert>
                  <AlertTitle>{errorMessages.security}</AlertTitle>
                </Alert>
              )}
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  );
}
