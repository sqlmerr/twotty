"use client";

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/hMVCxaoL2Hy
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

import { deletePost, getUserPosts, editPost } from "@/lib/api";
import { TrashIcon, Pencil1Icon } from "@radix-ui/react-icons";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import User from "@/lib/models/user";
import { format } from "date-fns";
import { useState } from "react";
import { Textarea } from "./ui/textarea";
import { Alert, AlertTitle } from "./ui/alert";

interface PostProps {
  id: string;
  text: string;
  edited: boolean;
  createdAt: Date;
  author: User;
  currentUser: User;
  setPosts: any;
}

export function Post({
  id,
  text,
  edited,
  createdAt,
  author,
  currentUser,
  setPosts,
}: PostProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [isEdited, setIsEdited] = useState(edited);
  const [content, setContent] = useState(text);
  const [newContent, setNewContent] = useState(text);
  const [errorMessage, setErrorMessage] = useState("");

  async function handleDeleteClick() {
    await deletePost(id);
    const userPosts = await getUserPosts(author.username);
    setPosts(userPosts);
  }

  function handleEditClick() {
    setIsEditing(true);
  }

  async function handleSaveClick() {
    const response = await editPost(id, newContent);
    if (response === false) {
      setErrorMessage("Text length must be less than 256 characters");
      return;
    }
    setErrorMessage("");
    setContent(newContent);
    setIsEditing(false);
    setIsEdited(true);
  }

  const time = format(createdAt, "yyyy-MM-dd HH:mm:ss");
  return (
    <Card className="w-full max-w-2xl">
      <CardContent className="p-4 md:p-6">
        <div className="flex items-start gap-4">
          <Avatar className="w-10 h-10 border">
            <AvatarImage
              src={author.avatar ? author.avatar : "/placeholder-user.jpg"}
            />
            <AvatarFallback>{author.username}</AvatarFallback>
          </Avatar>
          <div className="flex-1">
            <div className="flex items-center gap-2">
              <Link
                href={`/@${author.username}`}
                className="font-medium"
                prefetch={false}
              >
                @{author.username}
              </Link>
              <div className="text-xs text-slate-500 dark:text-slate-400">
                <time dateTime={time}>{time}</time>
              </div>
            </div>
            {isEditing ? (
              <div className="mt-2">
                <Textarea
                  value={newContent}
                  onChange={(e) => setNewContent(e.target.value)}
                  className="min-h-[100px]"
                />
                <div className="mt-2 flex justify-end gap-2">
                  <Button variant="outline" onClick={handleSaveClick}>
                    Save
                  </Button>
                  <Button variant="ghost" onClick={() => setIsEditing(false)}>
                    Cancel
                  </Button>
                </div>
                {errorMessage && (
                  <Alert variant="destructive">
                    <AlertTitle>{errorMessage}</AlertTitle>
                  </Alert>
                )}
              </div>
            ) : (
              <div className="prose prose-sm text-slate-950 dark:text-slate-50 break-all whitespace-pre-line">
                {content}
              </div>
            )}
            {isEdited && (
              <div className="mt-2 text-xs text-slate-500 dark:text-slate-400">
                Edited
              </div>
            )}
          </div>
          {currentUser?.id == author.id && (
            <>
              <Button
                variant="ghost"
                size="icon"
                className="top-0 right-0"
                onClick={handleDeleteClick}
              >
                <TrashIcon />
                <span className="sr-only">Delete post</span>
              </Button>
              <Button
                variant="ghost"
                size="icon"
                className="top-0 right-0"
                onClick={handleEditClick}
              >
                <Pencil1Icon />
                <span className="sr-only">Edit post</span>
              </Button>
            </>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
